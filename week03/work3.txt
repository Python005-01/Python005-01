3. 为以下 sql 语句标注执行顺序：
SELECT DISTINCT player_id, player_name, count(*) as num      5
FROM player JOIN team ON player.team_id = team.team_id   1
WHERE height > 1.80                                                              2    
GROUP BY player.team_id                                                       3
HAVING num > 2                                                                   4
ORDER BY num DESC                                                             6
LIMIT 2                                                                                   7



4. 以下两张基于 id 列，分别使用 INNER JOIN、LEFT JOIN、 RIGHT JOIN 的结果是什么?
------t1表
mysql> select * from t1;
+------+------+
| id   | name |
+------+------+
|    1 | aa   |
|    2 | bb   |
|    3 | cc   |
|    4 | dd   |
|    5 | ee   |
+------+------+
------t2表
mysql> select * from t2;
+------+------+
| id   | name |
+------+------+
|    4 | dd   |
|    5 | ee   |
|    6 | ff   |
|    7 | hh   |
|    8 | ii   |
+------+------+

---inner join 显示 t1和t2 相等的
mysql> select t1.id as 't1.id', t1.name as 't1.name', t2.id as 't2.id', t2.name as 't2.name'   from  t1 inner join t2 on t1.id = t2.id;
+-------+---------+-------+---------+
| t1.id | t1.name | t2.id | t2.name |
+-------+---------+-------+---------+
|     4 | dd      |     4 | dd      |
|     5 | ee      |     5 | ee      |
+-------+---------+-------+---------+

----left  显示 t1和t2 相等的  和左边t1表不相等的
mysql> select t1.id as 't1.id', t1.name as 't1.name', t2.id as 't2.id', t2.name as 't2.name'   from  t1 left join t2 on t1.id = t2.id;
+-------+---------+-------+---------+
| t1.id | t1.name | t2.id | t2.name |
+-------+---------+-------+---------+
|     4 | dd      |     4 | dd      |
|     5 | ee      |     5 | ee      |
|     1 | aa      |  NULL | NULL    |
|     2 | bb      |  NULL | NULL    |
|     3 | cc      |  NULL | NULL    |
+-------+---------+-------+---------+


----right 显示 t1和t2 相等的  和右边t2表不相等的
mysql> select t1.id as 't1.id', t1.name as 't1.name', t2.id as 't2.id', t2.name as 't2.name'   from  t1 right join t2 on t1.id = t2.id;
+-------+---------+-------+---------+
| t1.id | t1.name | t2.id | t2.name |
+-------+---------+-------+---------+
|         4 | dd      |     4 | dd      |
|         5 | ee      |     5 | ee      |
|  NULL | NULL    |     6 | ff      |
|  NULL | NULL    |     7 | hh      |
|  NULL | NULL    |     8 | ii      |
+-------+---------+-------+---------+


5. 使用 MySQL 官方文档，学习通过 sql 语句为上题中的 id 和 name 增加索引，
并验证。根据执行时间，增加索引以后是否查询速度会增加？请论述原因，并思考什
么样的场景下增加索引才有效。

会增加速度,索引好像是字典,不会在去全表扫描,mysql索引根据二叉树查看。
索引分为:
--1.普通索引
查找到第一个满足条件的记录后，继续向后遍历，直到第一个不满足条件的记录。
--2.唯一索引
由于索引定义了唯一性，查找到第一个满足条件的记录后，直接停止继续检索,可以为NULL值,一搬用于这个字段都是唯一的值,没有重复的。
--3.主键索引
一个特殊的唯一索引,不可以为NULL值,一般是在有主键的字段。
--4.聚合索引(多列索引)
以表的多个列字段组合创建的索引,也可一多列组合唯一聚合索引。
--5.全文索引
索引一般用于慢SQL,表中有大量数据，这里就要用到索引

6. 张三给李四通过网银转账 100 极客币，现有数据库中三张表：

一张为用户表，包含用户 ID 和用户名字，
另一张为用户资产表，包含用户 ID 用户总资产，
第三张表为审计用表，记录了转账时间，转账 id，被转账 id，转账金额。

请合理设计三张表的字段类型和表结构；
请实现转账 100 极客币的 SQL(可以使用 pymysql 或 sqlalchemy-orm 实现)，
张三余额不足，转账过程中数据库 crash 等情况需保证数据一致性
用户表
文件:
User_transfer_orm.py



